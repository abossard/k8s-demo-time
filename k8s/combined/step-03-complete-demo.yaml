apiVersion: v1
kind: Namespace
metadata:
  name: autoscaling-demo
---
# Complete demonstration: All QoS classes with appropriate autoscaling strategies
---
# 1. Critical Frontend - Guaranteed QoS + HPA (CPU-based)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: critical-frontend
  namespace: autoscaling-demo
  labels:
    app: critical-frontend
    tier: critical
    qos: guaranteed
spec:
  replicas: 2
  selector:
    matchLabels:
      app: critical-frontend
  template:
    metadata:
      labels:
        app: critical-frontend
        tier: critical
        qos: guaranteed
    spec:
      priorityClassName: high-priority
      containers:
        - name: k8s-demo-app
          image: k8sdemoanbo.azurecr.io/k8s-demo-app:latest
          imagePullPolicy: IfNotPresent
          env:
            - name: ASPNETCORE_URLS
              value: http://+:8080
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
          ports:
            - name: http
              containerPort: 8080
          resources:
            requests:
              cpu: "500m"
              memory: "512Mi"
            limits:
              cpu: "500m"
              memory: "512Mi"
          startupProbe:
            httpGet:
              path: /health/startup
              port: http
            failureThreshold: 20
            periodSeconds: 3
          readinessProbe:
            httpGet:
              path: /health/readiness
              port: http
            periodSeconds: 5
          livenessProbe:
            httpGet:
              path: /health/liveness
              port: http
            periodSeconds: 10
---
# 2. Standard Backend - Burstable QoS + VPA (Memory-based)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: standard-backend
  namespace: autoscaling-demo
  labels:
    app: standard-backend
    tier: standard
    qos: burstable
spec:
  replicas: 3
  selector:
    matchLabels:
      app: standard-backend
  template:
    metadata:
      labels:
        app: standard-backend
        tier: standard
        qos: burstable
    spec:
      priorityClassName: medium-priority
      containers:
        - name: k8s-demo-app
          image: k8sdemoanbo.azurecr.io/k8s-demo-app:latest
          imagePullPolicy: IfNotPresent
          env:
            - name: ASPNETCORE_URLS
              value: http://+:8080
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
          ports:
            - name: http
              containerPort: 8080
          resources:
            requests:
              cpu: "200m"
              memory: "256Mi"
            limits:
              cpu: "1"
              memory: "1Gi"
          startupProbe:
            httpGet:
              path: /health/startup
              port: http
            failureThreshold: 20
            periodSeconds: 3
          readinessProbe:
            httpGet:
              path: /health/readiness
              port: http
            periodSeconds: 5
          livenessProbe:
            httpGet:
              path: /health/liveness
              port: http
            periodSeconds: 10
---
# 3. Batch Worker - BestEffort QoS (no autoscaling)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: batch-worker
  namespace: autoscaling-demo
  labels:
    app: batch-worker
    tier: batch
    qos: besteffort
spec:
  replicas: 2
  selector:
    matchLabels:
      app: batch-worker
  template:
    metadata:
      labels:
        app: batch-worker
        tier: batch
        qos: besteffort
    spec:
      priorityClassName: low-priority
      containers:
        - name: k8s-demo-app
          image: k8sdemoanbo.azurecr.io/k8s-demo-app:latest
          imagePullPolicy: IfNotPresent
          env:
            - name: ASPNETCORE_URLS
              value: http://+:8080
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
          ports:
            - name: http
              containerPort: 8080
          # No resources = BestEffort
          startupProbe:
            httpGet:
              path: /health/startup
              port: http
            failureThreshold: 20
            periodSeconds: 3
          readinessProbe:
            httpGet:
              path: /health/readiness
              port: http
            periodSeconds: 5
          livenessProbe:
            httpGet:
              path: /health/liveness
              port: http
            periodSeconds: 10
---
# Priority Classes
apiVersion: scheduling.k8s.io/v1
kind: PriorityClass
metadata:
  name: high-priority
value: 1000000
globalDefault: false
description: "High priority for critical workloads"
---
apiVersion: scheduling.k8s.io/v1
kind: PriorityClass
metadata:
  name: medium-priority
value: 500000
globalDefault: false
description: "Medium priority for standard workloads"
---
apiVersion: scheduling.k8s.io/v1
kind: PriorityClass
metadata:
  name: low-priority
value: 100000
globalDefault: false
description: "Low priority for batch workloads"
---
# HPA for critical frontend (CPU-based horizontal scaling)
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: critical-frontend-hpa
  namespace: autoscaling-demo
  annotations:
    demo.k8s/description: "Scales horizontally based on CPU utilization"
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: critical-frontend
  minReplicas: 2
  maxReplicas: 10
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 60
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 30
      policies:
        - type: Percent
          value: 100
          periodSeconds: 30
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
        - type: Percent
          value: 50
          periodSeconds: 60
---
# VPA for standard backend (memory-based vertical scaling)
apiVersion: autoscaling.k8s.io/v1
kind: VerticalPodAutoscaler
metadata:
  name: standard-backend-vpa
  namespace: autoscaling-demo
  annotations:
    demo.k8s/description: "Adjusts memory requests based on usage patterns"
spec:
  targetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: standard-backend
  updatePolicy:
    updateMode: "Auto"
  resourcePolicy:
    containerPolicies:
      - containerName: k8s-demo-app
        controlledResources:
          - memory
        minAllowed:
          cpu: "200m"
          memory: "256Mi"
        maxAllowed:
          cpu: "1"
          memory: "2Gi"
---
# Services
apiVersion: v1
kind: Service
metadata:
  name: critical-frontend
  namespace: autoscaling-demo
spec:
  selector:
    app: critical-frontend
  ports:
    - port: 80
      targetPort: http
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: standard-backend
  namespace: autoscaling-demo
spec:
  selector:
    app: standard-backend
  ports:
    - port: 80
      targetPort: http
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: batch-worker
  namespace: autoscaling-demo
spec:
  selector:
    app: batch-worker
  ports:
    - port: 80
      targetPort: http
  type: ClusterIP
